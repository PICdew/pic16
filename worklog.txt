2009-12-03: (small) VICTORY! Found the bug in the checksum calculator (missed an
            INC FSR while iterating in 16 bit increments). Made lots of test
            code for the checksum, should be easy to get the rest done now.

2009-11-30: Spent an evening on trying to get the IP checksum method to work. No
            go so far.

2009-11-29: Made big progress today:
             - Got the PIC to write me a complete IP package header, without
               checksum.

$ tcpdump -n -vvv -xx -XX -e -r tcpdump/serial.pcap
reading from file tcpdump/serial.pcap, link-type SLIP (SLIP)
16:43:47.352056 O 40.00.00.00.00.00.00.00.00.00.00.00.00.00.00: (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto ICMP (1), length 20, bad cksum 0 (->355)!) 193.168.90.66 > 193.168.90.1: [|icmp]
        0x0000:  0140 0000 0000 0000 0000 0000 0000 0000  .@..............
        0x0010:  4500 0014 0000 4000 4001 0000 c1a8 5a42  E.....@.@.....ZB
        0x0020:  c1a8 5a01                                ..Z.

             - Divided up the assembly file into several (more or less)
               standalone .inc files. Should make it a bit easier to naviate
               the source code.

            Found one issue with the USB serial cable. It'll buffer lots of
            bytes which may or may not be junk, but it certainly is not the
            bytes you want! I have to pull the usb cable and insert it again
            before each capture to get the latest bytes from the device. Since
            I have virtually not error checking in my capture code I've seen
            a few "bus error" messages today.

            Defined coding standards:

             - Method internal symbols starts with "_". Makes it easier to not
               get confused between public and "private" symbols.
             - The labels of methods and variables both start with a small
               letter. This makes it easier to see them in the listing.
             - Include libraries at the end of the assembly file. Each include
               file should define the variables they need in a CBLOCK.

2009-11-28: VICTORY II! Hand crafted a SLIP packet containing an ICMP ECHO 
            reply message. Now that I have all the bytes required, time to
            get the PIC to do the work!

$ tcpdump -n -vvv -xx -XX -e -r tcpdump/out.pcap 
reading from file tcpdump/out.pcap, link-type SLIP (SLIP)
22:38:09.053778 O 40.00.90.fc.f9.ff.bf.98.f9.ff.bf.38.f9.ff.bf: (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto ICMP (1), length 28) 192.168.90.66 > 192.168.90.1: ICMP echo request, id 20, seq 10, length 8
        0x0000:  0140 0090 fcf9 ffbf 98f9 ffbf 38f9 ffbf  .@..........8...
        0x0010:  4500 001c 0000 4000 4001 054d c0a8 5a42  E.....@.@..M..ZB
        0x0020:  c0a8 5a01 0800 f7e1 0014 000a            ..Z.........

            VICTORY! Serial communication is working. Wired up the MAX232 and
            used another usb-serial dongle that I had lying around. Noticed
            that I had bought 0.1uF capacitors instead of the 1.0uF capacitors
            the MAX232 requires, but it still worked. I'll replace the MAX232
            with a MAX232A.

            Having a well defined project statement makes it easier for me to 
            focus so here it is:

              Implement a card that will read the current temperature and
              communicate over Ethernet using IPMI.

            This is a big goal so I've broken it up a bit:

             - Learn IP by sending characters over a serial line using SLIP. 

               This requires way less hardware on the board and other 
               hardware/software components.

               Part goals:
                * Transmit characters over a serial line
                * Use interrupts to wait while transmitting the characters
                * Send a single SLIP package containing an ICMP EHCO reply

             - Control the ADC

               Part goals:
                * Read a value from the ADC
                * Adjust the read value from the ADC with the NTC's coefficients

             - Learn how to etch my own PCB cards

2009-11-25: Spend an evening trying to read the serial data through the TTL-232R
            usb-to-serial thingy but couldn't get it to work. I think my
            oscillioscope is broken.

            Tried different power sources to make sure I understand how
            everything work. Realized that my PIC part is a low-voltage part,
            but I have a 5V serial cable.

2009-11-24: First serial character written to pin, seen on oscilloscope.
            Realized that the PIC was running on 8MHz.

2009-11-23: Portet test-2 to work on the new chip
